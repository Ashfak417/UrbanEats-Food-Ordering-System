CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(60),
    last_name VARCHAR2(60),
    email VARCHAR2(100) UNIQUE NOT NULL,
    phone_number VARCHAR2(20),
    password VARCHAR2(100),
    role VARCHAR2(30),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

);


INSERT INTO users (first_name, last_name, email, phone_number, password, role) 
VALUES 
(
    'Head', 'Admin', 'owner@urbaneats.lk', '9999999999',
    'urban123', 
    'head_admin'
);


CREATE TABLE ORDERS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    ADDRESS_LINE1 VARCHAR2(255),
    ADDRESS_LINE2 VARCHAR2(255),
    CITY VARCHAR2(100),
    PROVINCE VARCHAR2(100),
    ZIP VARCHAR2(20),
    CONTACT VARCHAR2(20),
    PAYMENT_METHOD VARCHAR2(50),
    TOTAL_AMOUNT NUMBER,
    ORDER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE orders 
ADD status VARCHAR2(20) DEFAULT 'completed';


CREATE TABLE ORDER_ITEMS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ORDER_ID NUMBER NOT NULL,
    ITEM_ID NUMBER NOT NULL,
    QUANTITY NUMBER,
    PRICE NUMBER,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID),
    FOREIGN KEY (ITEM_ID) REFERENCES MENU_ITEMS(ID)
);


CREATE TABLE MENU_ITEMS (
    ID            NUMBER PRIMARY KEY,
    NAME          VARCHAR2(100) NOT NULL,
    PRICE         NUMBER(6, 2) NOT NULL,
    CATEGORY      VARCHAR2(50) NOT NULL,
    DESCRIPTION   VARCHAR2(500),
    IMAGE_URL     VARCHAR2(500)
);

-- Create sequence
CREATE SEQUENCE menu_items_seq START WITH 13 INCREMENT BY 1;

-- Create trigger
CREATE OR REPLACE TRIGGER trg_menu_items_id
BEFORE INSERT ON menu_items
FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL THEN
        SELECT menu_items_seq.NEXTVAL INTO :NEW.id FROM dual;
    END IF;
END;


ALTER TABLE MENU_ITEMS
ADD STATUS VARCHAR2(20);

CREATE TABLE CART (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    ITEM_ID NUMBER NOT NULL,
    QUANTITY NUMBER DEFAULT 1,
    CONSTRAINT FK_CART_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_CART_ITEM FOREIGN KEY (ITEM_ID) REFERENCES MENU_ITEMS(ID)
);

CREATE TABLE cart_logs (
  log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  user_id NUMBER,
  item_id NUMBER,
  log_time TIMESTAMP,
  message VARCHAR2(200)
);

CREATE OR REPLACE TRIGGER trg_log_add_to_cart
AFTER INSERT ON cart
FOR EACH ROW
BEGIN
  INSERT INTO cart_logs (user_id, item_id, log_time, message)
  VALUES (
    :NEW.user_id,
    :NEW.item_id,
    SYSTIMESTAMP,
    'Item added to cart'
  );
END;

SELECT * FROM cart_logs WHERE USER_ID = 64;

CREATE TABLE menu_item_logs (
    log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    item_id NUMBER,
    item_name VARCHAR2(100),
    log_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    message VARCHAR2(200)
);

CREATE OR REPLACE TRIGGER log_menu_items
AFTER INSERT ON menu_items
FOR EACH ROW
BEGIN
    INSERT INTO menu_item_logs (item_id, item_name, message)
    VALUES (
        :NEW.id,
        :NEW.name,
        'Menu item added: ' || :NEW.name
    );
END;
/

SELECT * FROM menu_item_logs;



